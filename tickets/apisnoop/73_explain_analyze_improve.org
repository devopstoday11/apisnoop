#+TITLE: Speeding up Slim

*  The Ticket
[[https://gitlab.ii.coop/cncf/apisnoop/issues/73][gitlab link]]

#+begin_quote
the time between query and response in our endpoint coverage views is longer than ideal.  The endpoint stats takes about 5-7 seconds to complete.  

It would be good to use the explain and analyze functions of postgres to better understand how these queries are being planned and executed, and see if there's anywhere to speed it up.

potentially useful links:
- https://wiki.postgresql.org/wiki/Performance_Optimization
- https://blog.gojekengineering.com/the-postgres-performance-tuning-manual-query-plans-52a023c2342d
- https://amplitude.engineering/how-a-single-postgresql-config-change-improved-slow-query-performance-by-50x-85593b8991b0 ( a bit clickbaity, but has a good rundown of using explain analyze)
#+end_quote
  
* Process
** Check out the indexes for our tables
  
   First, let's take a look at what our db is made of.
   
   #+begin_src sql-mode
   \d+
   #+end_src

   #+RESULTS:
   #+begin_src sql-mode
                                           List of relations
    Schema |               Name               |       Type        |  Owner   |  Size   | Description 
   --------+----------------------------------+-------------------+----------+---------+-------------
    public | api_operation_material           | materialized view | apisnoop | 3568 kB | 
    public | api_operation_parameter_material | materialized view | apisnoop | 5800 kB | 
    public | audit_event                      | view              | apisnoop | 0 bytes | 
    public | bucket_job_swagger               | table             | apisnoop | 3600 kB | 
    public | change_in_coverage               | view              | apisnoop | 0 bytes | 
    public | change_in_tests                  | view              | apisnoop | 0 bytes | 
    public | endpoint_coverage                | view              | apisnoop | 0 bytes | 
    public | endpoints_hit_by_new_test        | view              | apisnoop | 0 bytes | 
    public | projected_change_in_coverage     | view              | apisnoop | 0 bytes | 
    public | raw_audit_event                  | table             | apisnoop | 687 MB  | 
    public | stable_endpoint_stats            | view              | apisnoop | 0 bytes | 
   (11 rows)

   #+end_src

   We have four things that can be indexed: 
- raw_audit_event
- bucket_job_swagger
- api_operation_material
- api_operation_parameter_material.  

Indexes will make each faster.  What indexes do they currently have?
*** raw_audit_event
    #+NAME: Indexes for raw_audit_event
    #+begin_src sql-mode
    select * from pg_indexes where tablename = 'raw_audit_event';
    #+end_src

    #+RESULTS: Indexes for raw_audit_event
    #+begin_src sql-mode
     schemaname |    tablename    |            indexname            | tablespace |                                                indexdef                                                
    ------------+-----------------+---------------------------------+------------+--------------------------------------------------------------------------------------------------------
     public     | raw_audit_event | idx_audit_event_jsonb_ops       |            | CREATE INDEX idx_audit_event_jsonb_ops ON public.raw_audit_event USING gin (data)
     public     | raw_audit_event | idx_audit_event_jsonb_path_jobs |            | CREATE INDEX idx_audit_event_jsonb_path_jobs ON public.raw_audit_event USING gin (data jsonb_path_ops)
    (2 rows)

    #+end_src

*** bucket_job_swagger
    #+begin_src sql-mode
    select * from pg_indexes where tablename = 'bucket_job_swagger';
    #+end_src

    #+RESULTS:
    #+begin_src sql-mode
     schemaname |     tablename      |         indexname          | tablespace |                                                indexdef                                                 
    ------------+--------------------+----------------------------+------------+---------------------------------------------------------------------------------------------------------
     public     | bucket_job_swagger | bucket_job_swagger_pkey    |            | CREATE UNIQUE INDEX bucket_job_swagger_pkey ON public.bucket_job_swagger USING btree (bucket, job)
     public     | bucket_job_swagger | idx_swagger_jsonb_ops      |            | CREATE INDEX idx_swagger_jsonb_ops ON public.bucket_job_swagger USING gin (swagger)
     public     | bucket_job_swagger | idx_swagger_jsonb_path_ops |            | CREATE INDEX idx_swagger_jsonb_path_ops ON public.bucket_job_swagger USING gin (swagger jsonb_path_ops)
    (3 rows)

    #+end_src

*** api_operation_material
    #+begin_src sql-mode
    select * from pg_indexes where tablename = 'api_operation_material';
    #+end_src

    #+RESULTS:
    #+begin_src sql-mode
     schemaname |       tablename        |                 indexname                  | tablespace |                                                            indexdef                                                            
    ------------+------------------------+--------------------------------------------+------------+--------------------------------------------------------------------------------------------------------------------------------
     public     | api_operation_material | api_operation_materialized_event_verb      |            | CREATE INDEX api_operation_materialized_event_verb ON public.api_operation_material USING btree (event_verb)
     public     | api_operation_material | api_operation_materialized_k8s_action      |            | CREATE INDEX api_operation_materialized_k8s_action ON public.api_operation_material USING btree (k8s_action)
     public     | api_operation_material | api_operation_materialized_k8s_group       |            | CREATE INDEX api_operation_materialized_k8s_group ON public.api_operation_material USING btree (k8s_group)
     public     | api_operation_material | api_operation_materialized_k8s_version     |            | CREATE INDEX api_operation_materialized_k8s_version ON public.api_operation_material USING btree (k8s_version)
     public     | api_operation_material | api_operation_materialized_k8s_kind        |            | CREATE INDEX api_operation_materialized_k8s_kind ON public.api_operation_material USING btree (k8s_kind)
     public     | api_operation_material | api_operation_materialized_tags            |            | CREATE INDEX api_operation_materialized_tags ON public.api_operation_material USING btree (tags)
     public     | api_operation_material | api_operation_materialized_schemes         |            | CREATE INDEX api_operation_materialized_schemes ON public.api_operation_material USING btree (schemes)
     public     | api_operation_material | api_operation_materialized_regex_gist      |            | CREATE INDEX api_operation_materialized_regex_gist ON public.api_operation_material USING gist (regex gist_trgm_ops)
     public     | api_operation_material | api_operation_materialized_regex_gin       |            | CREATE INDEX api_operation_materialized_regex_gin ON public.api_operation_material USING gin (regex gin_trgm_ops)
     public     | api_operation_material | api_operation_materialized_consumes_ops    |            | CREATE INDEX api_operation_materialized_consumes_ops ON public.api_operation_material USING gin (consumes)
     public     | api_operation_material | api_operation_materialized_consumes_path   |            | CREATE INDEX api_operation_materialized_consumes_path ON public.api_operation_material USING gin (consumes jsonb_path_ops)
     public     | api_operation_material | api_operation_materialized_parameters_ops  |            | CREATE INDEX api_operation_materialized_parameters_ops ON public.api_operation_material USING gin (parameters)
     public     | api_operation_material | api_operation_materialized_parameters_path |            | CREATE INDEX api_operation_materialized_parameters_path ON public.api_operation_material USING gin (parameters jsonb_path_ops)
     public     | api_operation_material | api_operation_materialized_responses_ops   |            | CREATE INDEX api_operation_materialized_responses_ops ON public.api_operation_material USING gin (responses)
     public     | api_operation_material | api_operation_materialized_responses_path  |            | CREATE INDEX api_operation_materialized_responses_path ON public.api_operation_material USING gin (responses jsonb_path_ops)
    (15 rows)

    #+end_src

*** api_operation_parameter_material.  
    #+begin_src sql-mode
    select * from pg_indexes where tablename = 'api_operation_parameter_material';
    #+end_src

    #+RESULTS:
    #+begin_src sql-mode
     schemaname |            tablename             |             indexname              | tablespace |                                                       indexdef                                                        
    ------------+----------------------------------+------------------------------------+------------+-----------------------------------------------------------------------------------------------------------------------
     public     | api_operation_parameter_material | api_parameters_materialized_schema |            | CREATE INDEX api_parameters_materialized_schema ON public.api_operation_parameter_material USING btree (param_schema)
    (1 row)

    #+end_src
They all have indexes, and I am not sure if adding more would help antyhing.  We could potentially increase the specificity of an index using multiple columns, but my gut is telling me this isn't the issue.  What's likely causing theslowness is that we are generating views from `endpoint_coverage` which is just made up of a bunch of counts.  Counts are going to be inherently slow, and slower as the table increases.  Both our tables are hundres of thounsands of rows, and running 4 counts on it is going to be way too expensive.

We need to look into how to get counts faster.    
** Question: Do we need counts?
   For all our summary views, the exact count of test hits don't matter, we just want to know whether an endpoint is tested or not and conf_tested or not.  We build out summary counts like "# of tested endpints" based just on if their test_hits column is greater than 0.  This means we are doing a count on a result of a count, and counts are inherentlys low.  What if, instead, the test_hit column is #t or #f.  Then, our endpoint summaries are doing a count of how many have a column of true.  For one, we are only doing a single count, and it's on a table that is inherently imited to 500 or so rows (the # of stable endpoints from a swagger.json).  
   
   Currently, our test_writing views are based on ~endpoint_coverage~ and ~stable_endpoint_stats~, and stable_endpoint_stats is _also_ based on endpoint_coverage.
   
   
   If we can speed up that report, we can speed up our test queries.
   
   So what if we rebuild our endpoint_coverage report?
** New Endpoint Coverage
   
   First, let's establish a benchmark:
*** Current Coverage
    The current view looks as so:
    #+endpoint_coverage
    #+BEGIN_SRC sql-mode
       SELECT DISTINCT
         bjs.job_timestamp::date as date,
         ao.bucket as bucket,
         ao.job as job,
         ao.operation_id as operation_id,
         ao.level,
         ao.category,
         ao.k8s_group as group,
         ao.k8s_kind as kind,
         ao.k8s_version as version,
         count(*) filter (where ae.useragent like 'e2e.test%') as test_hits,
         count(*) filter (where ae.useragent like 'e2e.test%' AND useragent like '%[Conformance]%') as conf_hits,
         count(*) filter (where ae.useragent not like 'e2e.test%') as other_hits,
         count(ae.useragent) total_hits
         FROM api_operation_material ao
                LEFT JOIN audit_event ae ON (ao.operation_id = ae.operation_id AND ao.bucket = ae.bucket AND ao.job = ae.job)
                LEFT JOIN bucket_job_swagger bjs ON (ao.bucket = bjs.bucket AND ao.job = bjs.job)
           WHERE ao.deprecated IS False
         GROUP BY ao.operation_id, ao.bucket, ao.job, date, ao.level, ao.category, ao.k8s_group, ao.k8s_kind, ao.k8s_version;
    #+END_SRC
   
   Now, we'll create a new view, that does not involve counts.
*** Improved Coverage
  
   #+NAME: improved endpoint coverage
    #+BEGIN_SRC sql-mode
     CREATE OR REPLACE VIEW improved_coverage AS
        WITH tested as (
        SELECT DISTINCT
        job, operation_id,useragent
        FROM
        audit_event ae 
        WHERE ae.useragent like 'e2e.test%'
        ), hit as(
        SELECT DISTINCT
        job,
        operation_id
        FROM audit_event
        )
        select distinct
           ao.bucket as bucket,
           ao.job as job,
           ao.operation_id as operation_id,
           ao.level,
           ao.category,
           ao.k8s_group as group,
           ao.k8s_kind as kind,
           ao.k8s_version as version,
          exists(select 1 from tested c where c.operation_id = ao.operation_id and c.job = ao.job and c.useragent like '%[Conformance]%') as conformance_tested,
          exists(select 1 from tested t where t.operation_id = ao.operation_id and t.job = ao.job) as tested,
          exists(select 1 from hit h where  h.operation_id = ao.operation_id and h.job = ao.job) as hit
          from api_operation_material ao WHERE ao.deprecated IS false;
    #+END_SRC

    #+RESULTS: improved endpoint coverage
    #+begin_src sql-mode
    CREATE VIEW
    #+end_src
*** original benchmark   
     #+NAME: ec benchmark
     #+begin_src sql-mode
     explain analyze
     select * from endpoint_coverage;
     #+end_src
     
     #+RESULTS: ec benchmark
     #+begin_src sql-mode


      Unique  (cost=264107.56..268967.97 rows=138869 width=149) (actual time=5441.188..5441.996 rows=1820 loops=1)
        ->  Sort  (cost=264107.56..264454.73 rows=138869 width=149) (actual time=5441.185..5441.297 rows=1820 loops=1)
              Sort Key: ((bjs.job_timestamp)::date), ao.bucket, ao.job, ao.operation_id, ao.level, ao.category, ao.k8s_group, ao.k8s_kind, ao.k8s_version, (count(*) FILTER (WHERE ((raw.data ->> 'userAgent'::text) ~~ 'e2e.test%'::text))), (count(*) FILTER (WHERE (((raw.data ->> 'userAgent'::text) ~~ 'e2e.test%'::text) AND ((raw.data ->> 'userAgent'::text) ~~ '%[Conformance]%'::text)))), (count(*) FILTER (WHERE ((raw.data ->> 'userAgent'::text) !~~ 'e2e.test%'::text))), (count((raw.data ->> 'userAgent'::text)))
              Sort Method: quicksort  Memory: 512kB
              ->  GroupAggregate  (cost=232080.98..241801.81 rows=138869 width=149) (actual time=2828.800..5431.226 rows=1820 loops=1)
                    Group Key: ao.operation_id, ao.bucket, ao.job, ((bjs.job_timestamp)::date), ao.level, ao.category, ao.k8s_group, ao.k8s_kind, ao.k8s_version
                    ->  Sort  (cost=232080.98..232428.15 rows=138869 width=1287) (actual time=2828.625..3344.022 rows=322254 loops=1)
                          Sort Key: ao.operation_id, ao.bucket, ao.job, ((bjs.job_timestamp)::date), ao.level, ao.category, ao.k8s_group, ao.k8s_kind, ao.k8s_version
                          Sort Method: external merge  Disk: 413400kB
                          ->  Hash Left Join  (cost=1166.00..64532.23 rows=138869 width=1287) (actual time=54.064..573.843 rows=322254 loops=1)
                                Hash Cond: (raw.operation_id = api_operation_parameter_material.param_op)
                                ->  Hash Left Join  (cost=388.37..58596.40 rows=97781 width=1324) (actual time=51.849..481.171 rows=243789 loops=1)
                                      Hash Cond: ((ao.bucket = bjs.bucket) AND (ao.job = bjs.job))
                                      ->  Hash Right Join  (cost=373.37..58068.03 rows=97781 width=1316) (actual time=51.814..392.983 rows=243789 loops=1)
                                            Hash Cond: ((raw.operation_id = ao.operation_id) AND (raw.bucket = ao.bucket) AND (raw.job = ao.job))
                                            ->  Seq Scan on raw_audit_event raw  (cost=0.00..52593.74 rows=274874 width=1247) (actual time=0.044..167.179 rows=275429 loops=1)
                                            ->  Hash  (cost=341.52..341.52 rows=1820 width=113) (actual time=51.751..51.751 rows=1820 loops=1)
                                                  Buckets: 2048  Batches: 1  Memory Usage: 277kB
                                                  ->  Seq Scan on api_operation_material ao  (cost=0.00..341.52 rows=1820 width=113) (actual time=49.201..50.928 rows=1820 loops=1)
                                                        Filter: (deprecated IS FALSE)
                                                        Rows Removed by Filter: 432
                                      ->  Hash  (cost=12.00..12.00 rows=200 width=72) (actual time=0.022..0.022 rows=2 loops=1)
                                            Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                            ->  Seq Scan on bucket_job_swagger bjs  (cost=0.00..12.00 rows=200 width=72) (actual time=0.018..0.018 rows=2 loops=1)
                                ->  Hash  (cost=764.45..764.45 rows=1054 width=43) (actual time=2.203..2.204 rows=1054 loops=1)
                                      Buckets: 2048  Batches: 1  Memory Usage: 93kB
                                      ->  Seq Scan on api_operation_parameter_material  (cost=0.00..764.45 rows=1054 width=43) (actual time=0.006..1.958 rows=1054 loops=1)
                                            Filter: (param_name = 'body'::text)
                                            Rows Removed by Filter: 5862
      Planning Time: 1.662 ms
      JIT:
        Functions: 44
        Options: Inlining false, Optimization false, Expressions true, Deforming true
        Timing: Generation 5.910 ms, Inlining 0.000 ms, Optimization 1.708 ms, Emission 46.819 ms, Total 54.437 ms
      Execution Time: 5545.713 ms
     (35 rows)

     #+end_src
*** improved benchmark 
     #+NAME: zc benchmark
     #+begin_src sql-mode
     explain analyze
     select * from improved_coverage;
     #+end_src



     #+RESULTS: zc benchmark
     #+begin_src sql-mode
                                                                                                                                     QUERY PLAN                                                                                                                                 
     ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      Unique  (cost=524836.69..524891.29 rows=1820 width=116) (actual time=3703.177..3703.869 rows=1820 loops=1)
        CTE tested
          ->  Unique  (cost=54833.78..54853.75 rows=1406 width=84) (actual time=950.132..1283.152 rows=11860 loops=1)
                ->  Sort  (cost=54833.78..54838.77 rows=1997 width=84) (actual time=950.130..1273.871 rows=52358 loops=1)
                      Sort Key: raw.job, raw.operation_id, ((raw.data ->> 'userAgent'::text))
                      Sort Method: external merge  Disk: 12728kB
                      ->  Hash Left Join  (cost=1777.62..54724.30 rows=1997 width=84) (actual time=56.520..395.540 rows=52358 loops=1)
                            Hash Cond: (raw.operation_id = api_operation_parameter_material.param_op)
                            ->  Gather  (cost=1000.00..53872.51 rows=1406 width=1222) (actual time=53.598..264.893 rows=41430 loops=1)
                                  Workers Planned: 2
                                  Workers Launched: 2
                                  ->  Parallel Seq Scan on raw_audit_event raw  (cost=0.00..52731.91 rows=586 width=1222) (actual time=260.438..414.655 rows=13810 loops=3)
                                        Filter: ((data ->> 'userAgent'::text) ~~ 'e2e.test%'::text)
                                        Rows Removed by Filter: 80404
                            ->  Hash  (cost=764.45..764.45 rows=1054 width=43) (actual time=2.884..2.884 rows=1054 loops=1)
                                  Buckets: 2048  Batches: 1  Memory Usage: 93kB
                                  ->  Seq Scan on api_operation_parameter_material  (cost=0.00..764.45 rows=1054 width=43) (actual time=0.013..2.662 rows=1054 loops=1)
                                        Filter: (param_name = 'body'::text)
                                        Rows Removed by Filter: 5862
        ->  Sort  (cost=469982.95..469987.50 rows=1820 width=116) (actual time=3703.176..3703.288 rows=1820 loops=1)
              Sort Key: ao.bucket, ao.job, ao.operation_id, ao.level, ao.category, ao.k8s_group, ao.k8s_kind, ao.k8s_version, ((alternatives: SubPlan 2 or hashed SubPlan 3)), ((alternatives: SubPlan 4 or hashed SubPlan 5)), ((alternatives: SubPlan 6 or hashed SubPlan 7))
              Sort Method: quicksort  Memory: 428kB
              ->  Seq Scan on api_operation_material ao  (cost=0.00..469884.40 rows=1820 width=116) (actual time=3692.514..3694.342 rows=1820 loops=1)
                    Filter: (deprecated IS FALSE)
                    Rows Removed by Filter: 432
                    SubPlan 2
                      ->  CTE Scan on tested c  (cost=0.00..38.67 rows=1 width=0) (never executed)
                            Filter: ((useragent ~~ '%[Conformant]%'::text) AND (operation_id = ao.operation_id) AND (job = ao.job))
                    SubPlan 3
                      ->  CTE Scan on tested c_1  (cost=0.00..31.63 rows=1 width=64) (actual time=1293.623..1293.623 rows=0 loops=1)
                            Filter: (useragent ~~ '%[Conformant]%'::text)
                            Rows Removed by Filter: 11860
                    SubPlan 4
                      ->  CTE Scan on tested t  (cost=0.00..35.15 rows=1 width=0) (never executed)
                            Filter: ((operation_id = ao.operation_id) AND (job = ao.job))
                    SubPlan 5
                      ->  CTE Scan on tested t_1  (cost=0.00..28.12 rows=1406 width=64) (actual time=51.555..53.825 rows=11860 loops=1)
                    SubPlan 6
                      ->  Subquery Scan on h  (cost=0.00..55989.38 rows=304 width=0) (never executed)
                            ->  Unique  (cost=0.00..55986.34 rows=304 width=52) (never executed)
                                  ->  Nested Loop Left Join  (cost=0.00..55986.34 rows=868 width=52) (never executed)
                                        Join Filter: (raw_1.operation_id = api_operation_parameter_material_1.param_op)
                                        ->  Seq Scan on raw_audit_event raw_1  (cost=0.00..55191.57 rows=434 width=52) (never executed)
                                              Filter: ((operation_id = ao.operation_id) AND (job = ao.job))
                                        ->  Materialize  (cost=0.00..781.75 rows=2 width=43) (never executed)
                                              ->  Seq Scan on api_operation_parameter_material api_operation_parameter_material_1  (cost=0.00..781.74 rows=2 width=43) (never executed)
                                                    Filter: ((param_name = 'body'::text) AND (param_op = ao.operation_id))
                    SubPlan 7
                      ->  Subquery Scan on h_1  (cost=70390.73..70402.12 rows=570 width=52) (actual time=357.040..357.170 rows=456 loops=1)
                            ->  HashAggregate  (cost=70390.73..70396.43 rows=570 width=52) (actual time=357.038..357.118 rows=456 loops=1)
                                  Group Key: raw_2.job, raw_2.operation_id
                                  ->  Hash Left Join  (cost=777.62..68394.60 rows=399225 width=52) (actual time=53.999..264.836 rows=362546 loops=1)
                                        Hash Cond: (raw_2.operation_id = api_operation_parameter_material_2.param_op)
                                        ->  Seq Scan on raw_audit_event raw_2  (cost=0.00..53786.05 rows=281105 width=52) (actual time=0.020..128.978 rows=282642 loops=1)
                                        ->  Hash  (cost=764.45..764.45 rows=1054 width=43) (actual time=53.964..53.964 rows=1054 loops=1)
                                              Buckets: 2048  Batches: 1  Memory Usage: 93kB
                                              ->  Seq Scan on api_operation_parameter_material api_operation_parameter_material_2  (cost=0.00..764.45 rows=1054 width=43) (actual time=52.218..53.717 rows=1054 loops=1)
                                                    Filter: (param_name = 'body'::text)
                                                    Rows Removed by Filter: 5862
      Planning Time: 2.767 ms
      JIT:
        Functions: 147
        Options: Inlining true, Optimization true, Expressions true, Deforming true
        Timing: Generation 19.005 ms, Inlining 169.994 ms, Optimization 1703.797 ms, Emission 991.601 ms, Total 2884.397 ms
      Execution Time: 3748.150 ms
     (65 rows)

     #+end_src

** build endpint report from improved_coverage
   
   #+NAME: improved stats
   #+begin_src sql-mode
     CREATE OR REPLACE VIEW "public"."improved_endpoint_stats" AS
     SELECT
       ec.job,
       COUNT(1) as total_endpoints,
       COUNT(1) filter(WHERE tested is true) as test_hits,
       COUNT(1) filter(WHERE conformance_tested is true) as conformance_hits,
       ROUND(((count(*) filter(WHERE tested is true)) * 100 )::numeric / count(*), 2) as percent_tested,
       ROUND(((count(*) filter(WHERE conformance_tested is true)) * 100 )::numeric / count(*), 2) as percent_conf_tested
       FROM improved_coverage ec
         WHERE ec.level = 'stable'
      GROUP BY ec.job;
   #+end_src

   #+RESULTS: improved stats
   #+begin_src sql-mode
   CREATE VIEW
   #+end_src
   
   If you run the two of these now, the improved_endpoint_stats is markedly faster.
   
   #+begin_src sql-mode
   explain analyze
     select * from improved_endpoint_stats;
   #+end_src

   #+RESULTS:
   #+begin_src sql-mode
                                                                                                                                       QUERY PLAN                                                                                                                                     
   -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    GroupAggregate  (cost=277711.54..277737.55 rows=200 width=100) (actual time=1633.808..1633.901 rows=2 loops=1)
      Group Key: ec.job
      ->  Sort  (cost=277711.54..277713.65 rows=845 width=14) (actual time=1633.692..1633.743 rows=860 loops=1)
            Sort Key: ec.job
            Sort Method: quicksort  Memory: 78kB
            ->  Subquery Scan on ec  (cost=277638.77..277670.46 rows=845 width=14) (actual time=1633.020..1633.519 rows=860 loops=1)
                  ->  Unique  (cost=277638.77..277662.01 rows=845 width=116) (actual time=1633.017..1633.337 rows=860 loops=1)
                        CTE tested
                          ->  Unique  (cost=56216.21..56236.69 rows=1442 width=84) (actual time=824.833..1158.996 rows=11860 loops=1)
                                ->  Sort  (cost=56216.21..56221.33 rows=2048 width=84) (actual time=824.830..1149.053 rows=52358 loops=1)
                                      Sort Key: raw.job, raw.operation_id, ((raw.data ->> 'userAgent'::text))
                                      Sort Method: external merge  Disk: 12728kB
                                      ->  Hash Left Join  (cost=1777.62..56103.57 rows=2048 width=84) (actual time=5.797..265.414 rows=52358 loops=1)
                                            Hash Cond: (raw.operation_id = api_operation_parameter_material.param_op)
                                            ->  Gather  (cost=1000.00..55249.88 rows=1442 width=1222) (actual time=3.912..131.500 rows=41430 loops=1)
                                                  Workers Planned: 2
                                                  Workers Launched: 2
                                                  ->  Parallel Seq Scan on raw_audit_event raw  (cost=0.00..54105.68 rows=601 width=1222) (actual time=13.257..181.118 rows=13810 loops=3)
                                                        Filter: ((data ->> 'userAgent'::text) ~~ 'e2e.test%'::text)
                                                        Rows Removed by Filter: 83228
                                            ->  Hash  (cost=764.45..764.45 rows=1054 width=43) (actual time=1.847..1.847 rows=1054 loops=1)
                                                  Buckets: 2048  Batches: 1  Memory Usage: 93kB
                                                  ->  Seq Scan on api_operation_parameter_material  (cost=0.00..764.45 rows=1054 width=43) (actual time=0.007..1.632 rows=1054 loops=1)
                                                        Filter: (param_name = 'body'::text)
                                                        Rows Removed by Filter: 5862
                        ->  Sort  (cost=221402.08..221404.19 rows=845 width=116) (actual time=1633.016..1633.071 rows=860 loops=1)
                              Sort Key: ao.bucket, ao.job, ao.operation_id, ao.category, ao.k8s_group, ao.k8s_kind, ao.k8s_version, ((alternatives: SubPlan 2 or hashed SubPlan 3)), ((alternatives: SubPlan 4 or hashed SubPlan 5)), ((alternatives: SubPlan 6 or hashed SubPlan 7))
                              Sort Method: quicksort  Memory: 189kB
                              ->  Seq Scan on api_operation_material ao  (cost=0.00..221361.00 rows=845 width=116) (actual time=1627.833..1629.362 rows=860 loops=1)
                                    Filter: ((deprecated IS FALSE) AND (level = 'stable'::text))
                                    Rows Removed by Filter: 1392
                                    SubPlan 2
                                      ->  CTE Scan on tested c  (cost=0.00..39.66 rows=1 width=0) (never executed)
                                            Filter: ((useragent ~~ '%[Conformance]%'::text) AND (operation_id = ao.operation_id) AND (job = ao.job))
                                    SubPlan 3
                                      ->  CTE Scan on tested c_1  (cost=0.00..32.45 rows=1 width=64) (actual time=824.854..1170.062 rows=3244 loops=1)
                                            Filter: (useragent ~~ '%[Conformance]%'::text)
                                            Rows Removed by Filter: 8616
                                    SubPlan 4
                                      ->  CTE Scan on tested t  (cost=0.00..36.05 rows=1 width=0) (never executed)
                                            Filter: ((operation_id = ao.operation_id) AND (job = ao.job))
                                    SubPlan 5
                                      ->  CTE Scan on tested t_1  (cost=0.00..28.84 rows=1442 width=64) (actual time=4.043..6.729 rows=11860 loops=1)
                                    SubPlan 6
                                      ->  Subquery Scan on h  (cost=0.00..57427.60 rows=309 width=0) (never executed)
                                            ->  Unique  (cost=0.00..57424.51 rows=309 width=52) (never executed)
                                                  ->  Nested Loop Left Join  (cost=0.00..57424.51 rows=890 width=52) (never executed)
                                                        Join Filter: (raw_1.operation_id = api_operation_parameter_material_1.param_op)
                                                        ->  Seq Scan on raw_audit_event raw_1  (cost=0.00..56629.42 rows=445 width=52) (never executed)
                                                              Filter: ((operation_id = ao.operation_id) AND (job = ao.job))
                                                        ->  Materialize  (cost=0.00..781.75 rows=2 width=43) (never executed)
                                                              ->  Seq Scan on api_operation_parameter_material api_operation_parameter_material_1  (cost=0.00..781.74 rows=2 width=43) (never executed)
                                                                    Filter: ((param_name = 'body'::text) AND (param_op = ao.operation_id))
                                    SubPlan 7
                                      ->  Subquery Scan on h_1  (cost=72204.26..72215.66 rows=570 width=52) (actual time=337.788..337.916 rows=456 loops=1)
                                            ->  HashAggregate  (cost=72204.26..72209.96 rows=570 width=52) (actual time=337.786..337.868 rows=456 loops=1)
                                                  Group Key: raw_2.job, raw_2.operation_id
                                                  ->  Hash Left Join  (cost=777.62..70156.13 rows=409625 width=52) (actual time=5.486..236.796 rows=372723 loops=1)
                                                        Hash Cond: (raw_2.operation_id = api_operation_parameter_material_2.param_op)
                                                        ->  Seq Scan on raw_audit_event raw_2  (cost=0.00..55187.28 rows=288428 width=52) (actual time=0.016..133.236 rows=291115 loops=1)
                                                        ->  Hash  (cost=764.45..764.45 rows=1054 width=43) (actual time=5.459..5.459 rows=1054 loops=1)
                                                              Buckets: 2048  Batches: 1  Memory Usage: 93kB
                                                              ->  Seq Scan on api_operation_parameter_material api_operation_parameter_material_2  (cost=0.00..764.45 rows=1054 width=43) (actual time=3.644..5.238 rows=1054 loops=1)
                                                                    Filter: (param_name = 'body'::text)
                                                                    Rows Removed by Filter: 5862
    Planning Time: 1.864 ms
    JIT:
      Functions: 154
      Options: Inlining false, Optimization false, Expressions true, Deforming true
      Timing: Generation 20.021 ms, Inlining 0.000 ms, Optimization 7.319 ms, Emission 144.131 ms, Total 171.471 ms
    Execution Time: 1650.471 ms
   (71 rows)

   #+end_src
   
   #+begin_src sql-mode
explain analyze
     select * from stable_endpoint_stats;
   #+end_src

   #+RESULTS:
   #+begin_src sql-mode
                                                                                                                                                                                                                                                           QUERY PLAN                                                                                                                                                                                                                                                        

    HashAggregate  (cost=165594.83..165831.75 rows=6769 width=104) (actual time=4614.643..4614.674 rows=2 loops=1)
      Group Key: ((bjs.job_timestamp)::date), ao.job
      ->  Unique  (cost=160518.23..162718.09 rows=67688 width=149) (actual time=4613.949..4614.280 rows=860 loops=1)
            ->  Sort  (cost=160518.23..160687.45 rows=67688 width=149) (actual time=4613.948..4614.001 rows=860 loops=1)
                  Sort Key: ((bjs.job_timestamp)::date), ao.bucket, ao.job, ao.operation_id, ao.category, ao.k8s_group, ao.k8s_kind, ao.k8s_version, (count(*) FILTER (WHERE ((raw.data ->> 'userAgent'::text) ~~ 'e2e.test%'::text))), (count(*) FILTER (WHERE (((raw.data ->> 'userAgent'::text) ~~ 'e2e.test%'::text) AND ((raw.data ->> 'userAgent'::text) ~~ '%[Conformance]%'::text)))), (count(*) FILTER (WHERE ((raw.data ->> 'userAgent'::text) !~~ 'e2e.test%'::text))), (count((raw.data ->> 'userAgent'::text)))
                  Sort Method: quicksort  Memory: 234kB
                  ->  GroupAggregate  (cost=145256.76..149994.92 rows=67688 width=149) (actual time=2230.134..4609.822 rows=860 loops=1)
                        Group Key: ao.operation_id, ao.bucket, ao.job, ((bjs.job_timestamp)::date), ao.level, ao.category, ao.k8s_group, ao.k8s_kind, ao.k8s_version
                        ->  Sort  (cost=145256.76..145425.98 rows=67688 width=1287) (actual time=2230.101..2613.861 rows=273196 loops=1)
                              Sort Key: ao.operation_id, ao.bucket, ao.job, ((bjs.job_timestamp)::date), ao.category, ao.k8s_group, ao.k8s_kind, ao.k8s_version
                              Sort Method: external merge  Disk: 346160kB
                              ->  Hash Left Join  (cost=1154.56..63938.94 rows=67688 width=1287) (actual time=56.610..515.897 rows=273196 loops=1)
                                    Hash Cond: (raw.operation_id = api_operation_parameter_material.param_op)
                                    ->  Hash Left Join  (cost=376.94..60647.08 rows=47661 width=1324) (actual time=54.773..436.282 rows=202093 loops=1)
                                          Hash Cond: ((ao.bucket = bjs.bucket) AND (ao.job = bjs.job))
                                          ->  Hash Right Join  (cost=361.94..60381.85 rows=47661 width=1316) (actual time=54.752..363.887 rows=202093 loops=1)
                                                Hash Cond: ((raw.operation_id = ao.operation_id) AND (raw.bucket = ao.bucket) AND (raw.job = ao.job))
                                                ->  Seq Scan on raw_audit_event raw  (cost=0.00..55214.72 rows=288572 width=1247) (actual time=0.038..145.090 rows=291279 loops=1)
                                                ->  Hash  (cost=347.15..347.15 rows=845 width=113) (actual time=54.703..54.703 rows=860 loops=1)
                                                      Buckets: 1024  Batches: 1  Memory Usage: 123kB
                                                      ->  Seq Scan on api_operation_material ao  (cost=0.00..347.15 rows=845 width=113) (actual time=53.354..54.365 rows=860 loops=1)
                                                            Filter: ((deprecated IS FALSE) AND (level = 'stable'::text))
                                                            Rows Removed by Filter: 1392
                                          ->  Hash  (cost=12.00..12.00 rows=200 width=72) (actual time=0.009..0.009 rows=2 loops=1)
                                                Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                ->  Seq Scan on bucket_job_swagger bjs  (cost=0.00..12.00 rows=200 width=72) (actual time=0.005..0.006 rows=2 loops=1)
                                    ->  Hash  (cost=764.45..764.45 rows=1054 width=43) (actual time=1.829..1.829 rows=1054 loops=1)
                                          Buckets: 2048  Batches: 1  Memory Usage: 93kB
                                          ->  Seq Scan on api_operation_parameter_material  (cost=0.00..764.45 rows=1054 width=43) (actual time=0.005..1.614 rows=1054 loops=1)
                                                Filter: (param_name = 'body'::text)
                                                Rows Removed by Filter: 5862
    Planning Time: 1.752 ms
    JIT:
      Functions: 51
      Options: Inlining false, Optimization false, Expressions true, Deforming true
      Timing: Generation 7.539 ms, Inlining 0.000 ms, Optimization 2.113 ms, Emission 50.515 ms, Total 60.167 ms
    Execution Time: 4667.276 ms
   (37 rows)

   #+end_src
   
   I think we have a winner!

* Conclusions | Next Steps
  If we do not care about the total # of hits, and just whether an endpoint is tested or not or conformance tested or not, we can speed up our endpoint coverage query and all other queries it derives from.  I do not see a need for the total number of test hits-- no derived query uses it and it doesn't hold any intrinsic insight, and so I think it would be safe to adjust this view.
  
  The next step is to adjust the views in our tables_and_views_bot.org to this updated look.

* Footnotes
  #+begin_src sql-mode
    \dt+
  #+end_src

  #+RESULTS:
  #+begin_src sql-mode
                             List of relations
   Schema |        Name        | Type  |  Owner   |  Size   | Description 
  --------+--------------------+-------+----------+---------+-------------
   public | bucket_job_swagger | table | apisnoop | 3600 kB | 
   public | raw_audit_event    | table | apisnoop | 411 MB  | 
  (2 rows)

  #+end_src

  #+begin_src sql-mode
\dt+
  #+end_src

  #+RESULTS:
  #+begin_src sql-mode
                             List of relations
   Schema |        Name        | Type  |  Owner   |  Size   | Description 
  --------+--------------------+-------+----------+---------+-------------
   public | bucket_job_swagger | table | apisnoop | 3600 kB | 
   public | raw_audit_event    | table | apisnoop | 419 MB  | 
  (2 rows)

  #+end_src
  
  #+begin_src sql-mode
  select distinct count(*) from endpoint_coverage where level = 'stable' and category = 'core' and other_hits > 0 and test_hits = 0 and job != 'live';
  #+end_src

  #+RESULTS:
  #+begin_src sql-mode
   count 
  -------
      45
  (1 row)

  #+end_src
