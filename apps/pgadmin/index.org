#+TITLE: PGadmin Code, Deployment, and Reference Materials
#+TODO: TODO(t) IN-PROGRESS(i) WAITING(w) | DONE(d)

* Introduction 
  A web-based Postgres management interface
* Deployment
** deployment.yaml
#+begin_src yaml :tangle ./deployment/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pgadmin
spec:
  replicas: 1
  selector:
    matchLabels:
      io.apisnoop.dba: pgadmin
  template:
    metadata:
      labels:
        io.apisnoop.dba: pgadmin
    spec:
      securityContext:
        runAsUser: 5050
        fsGroup: 5050
      restartPolicy: Always
      initContainers:
      - name: cp-servers-json
        image: alpine:3.6
        command:
          - cp
          - /pgadmin-configuration/servers.json
          - /pgadmin-config/servers.json
        volumeMounts:
          - name: pgadmin-configuration
            mountPath: /pgadmin-configuration/
          - name: pgadmin-config
            mountPath: /pgadmin-config
      - name: chmod-servers-json
        image: alpine:3.6
        command:
          - chmod
          - "0400"
          - /pgadmin-config/servers.json
        volumeMounts:
          - name: pgadmin-config
            mountPath: /pgadmin-config
      - name: cp-pgpass
        image: alpine:3.6
        # securityContext:
        #   runAsUser: 0
        command:
          - cp
          - /pgadmin-configuration/pgpass
          - /pgadmin-config/pgpass
        volumeMounts:
          - name: pgadmin-configuration
            mountPath: /pgadmin-configuration/
          - name: pgadmin-config
            mountPath: /pgadmin-config
      - name: chmod-pgpass
        image: alpine:3.6
        command:
          - chmod
          - "0400"
          - /pgadmin-config/pgpass
        volumeMounts:
          - name: pgadmin-config
            mountPath: /pgadmin-config
      containers:
      - name: pgadmin
        image: "dpage/pgadmin4:4.17"
        ports:
        - containerPort: 80
        volumeMounts:
          - name: pgadmin-config
            mountPath: /pgadmin-config/
        env:
          - name: PGADMIN_DEFAULT_EMAIL
            value: "apisnoop"
          - name: PGADMIN_DEFAULT_PASSWORD
            value: "apisnoop"
          - name: PGADMIN_SERVER_JSON_FILE
            value: "/pgadmin-config/servers.json"
          - name: PGADMIN_CONFIG_SERVER_MODE
            value: "False"
          - name: PGADMIN_CONFIG_APP_NAME
            value: "\"APISnoopQL\""
          - name: PGADMIN_CONFIG_APP_COPYRIGHT
            value: "\"Copyright 2019 The Cloud Native Compute Foundation\""
          - name: PGADMIN_CONFIG_LOGIN_BANNER
            value: "\"Welcome to APISnoopQL\""
          - name: PGADMIN_CONFIG_ALLOW_SAVE_PASSWORD
            value: "True"
          - name: PGADMIN_CONFIG_MAX_QUERY_HIST_STORED
            value: "1234"
          - name: PGADMIN_CONFIG_SESSION_COOKIE_NAME
            value: "\"apisnoopql_session\""
          - name: PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED
            value: "False"
          - name: PGADMIN_CONFIG_UPGRADE_CHECK_ENABLED
            value: "False"
          - name: PGADMIN_CONFIG_SESSION_EXPIRATION_TIME
            value: "7"
          - name: PGADMIN_CONFIG_CONSOLE_LOG_LEVEL
            value: "10"
          # - name: SCRIPT_NAME
          #   value: "/pgadmin"
      volumes:
        - name: pgadmin-configuration
          configMap:
            name: pgadmin-configuration
            items:
              - key: servers.json
                path: servers.json
                mode: 256
              - key: pgpass
                path: pgpass
                mode: 256
        - name: pgadmin-config
          emptyDir:
            medium: "Memory"
        # https://www.pgadmin.org/docs/pgadmin4/latest/container_deployment.html#http-via-nginx
#+end_src

** configmap.yaml
#+begin_src yaml :tangle ./deployment/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: pgadmin-configuration
data:
  servers.json: |
    { "Servers": { "1": {
      "Name": "apisnoop",
      "Group": "Servers",
      "Host": "postgres",
      "Port": 5432,
      "MaintenanceDB": "apisnoop",
      "Username": "apisnoop",
      "SSLMode": "prefer",
      "Comment": "APISnoop Database",
      "Password": "s3cretsauc3",
      "PassFile": "/pgadmin-config/pgpass",
      "SSLCompression": 0,
      "Timeout": 10,
      "UseSSHTunnel": 0,
      "TunnelPort": "22",
      "TunnelAuthentication": 0
     }}}
  pgpass: |
    postgres:5432:apisnoop:apisnoop:s3cretsauc3
#+end_src

** ingress.yaml
#+begin_src yaml :tangle ./deployment/ingress.yaml   
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: pgadmin-ingress
  annotations:
    nginx.ingress.kubernetes.io/server-alias: "pgadmin.local.ii.coop, pgadmin.local.ii.nz, pgadmin.local.sharing.io"
    # nginx.ingress.kubernetes.io/app-root: /pgadmin
    # nginx.ingress.kubernetes.io/rewrite-target: /$2
    # nginx.ingress.kubernetes.io/configuration-snippet: |
    #   proxy_set_header X-Script-Name "/pgadmin";
    #   proxy_set_header X-Scheme $scheme;
    #   # proxy_set_header Host $host;
  # annotations:
  #   nginx.ingress.kubernetes.io/app-root: /
  # annotations:
  #   nginx.ingress.kubernetes.io/rewrite-target: /$2
spec:
  rules:
  - host: pgadmin.localho.st
    http:
      # required PGADMIN_CONFIG_SERVER_MODE env set to False in deployment
      # We need to template this out
      paths:
      # - path: /pgadmin(/|$)(.*)
      - path: /
      # required SCRIPT_NAME env in deployment
      # - path: /pgadmin
        backend:
          serviceName: pgadmin
          servicePort: 80
#+end_src

** kustomization.yaml
#+begin_src yaml :tangle ./deployment/kustomization.yaml
apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization
resources:
  - configuration.yaml
  - deployment.yaml
  - service.yaml
  - ingress.yaml
# TODO maybe we can use a password generator here?
# TODO set ingress to pgadmin.local.sharing.io 
#+end_src

** service.yaml
#+begin_src yaml :tangle ./deployment/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: pgadmin
spec:
  selector:
    io.apisnoop.dba: pgadmin
  ports:
  - name: "http"
    port: 80
    targetPort: 80
#+end_src

* Footnotes
